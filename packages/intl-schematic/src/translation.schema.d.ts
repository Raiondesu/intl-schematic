/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This record simply allows to get the value string by the key, value can be an array to help break one-line texts in multiple lines for readability or to reference other translation records by their keys
 */
export type PlainStringTranslationRecord =
  | string
  | (
      | ReferenceToAnInputOfAnotherParamterizedRecord
      | ASinglePartOfAPlainStringTranslationRecord
      | AReferenceToAParametrizedTranslationRecord
    )[];
/**
 * Value must refer to a paramterized record that is already referenced in this array
 */
export type ReferenceToAnInputOfAnotherParamterizedRecord = string;
/**
 * Can be a key to another translation record
 */
export type ASinglePartOfAPlainStringTranslationRecord = string;
export type WhetherThisParametrizedRecordShouldBeIgnored = boolean;
/**
 * A name of the function that will process the input. It is a key to enable strict typing - value should be an empty string
 *
 * This interface was referenced by `FunctionName`'s JSON-Schema definition
 * via the `patternProperty` "^.*$".
 */
export type FunctionNameKey = string;
/**
 * Parameter to pass into the processor function before passing in the input
 */
export type ParameterObject =
  | (
      | unknown[]
      | boolean
      | number
      | null
      | number
      | {
          [k: string]: unknown;
        }
      | string
    )[]
  | {
      /**
       * A key-value in the parameter object
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^.*$".
       */
      [k: string]:
        | unknown[]
        | boolean
        | number
        | null
        | {
            [k: string]: unknown;
          }
        | string;
    };
/**
 * The input arguments to a translation function in the format of 'name': 'default-value'. Provide a default value for each key.
 */
export type InputObject =
  | {
      /**
       * A key in the input object, value is used as a default
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^.*$".
       */
      [k: string]:
        | unknown[]
        | boolean
        | number
        | null
        | {
            [k: string]: unknown;
          }
        | string;
    }
  | string
  | number
  | boolean
  | null;
/**
 * This interface was referenced by `PlainStringTranslationRecordWithReferences`'s JSON-Schema definition
 * via the `patternProperty` "^(?!input|processor|parameter).*$".
 */
export type EitherATranslationStringOrAReferenceToAnotherTranslationKey =
  | PlainStringOrReference
  | ParametrizedReference;
/**
 * Either a translation string or a reference to any other translation key
 */
export type PlainStringOrReference = string;
/**
 * Reference to a parametrized translation key, optionally provide an override for an input to the key's processor
 */
export type ParametrizedReference =
  | {
      /**
       * A key in the input object, value is used as a default
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^.*$".
       */
      [k: string]:
        | unknown[]
        | boolean
        | number
        | null
        | {
            [k: string]: unknown;
          }
        | string;
    }
  | number
  | boolean;

/**
 * Contains various localized strings that can be accessed with a key
 */
export interface TranslationDocument {
  /**
   * This interface was referenced by `TranslationDocument`'s JSON-Schema definition
   * via the `patternProperty` "^.+$".
   */
  [k: string]:
    | PlainStringTranslationRecord
    | ParametrizedTranslationRecord
    | PlainStringTranslationRecordWithReferences;
}
/**
 * Inserts the parametrized value into the string, provide an object with key that references the record and a value to serve as an input
 */
export interface AReferenceToAParametrizedTranslationRecord {
  [k: string]: WhetherThisParametrizedRecordShouldBeIgnored;
}
/**
 * This interface was referenced by `AReferenceToAParametrizedTranslationRecord`'s JSON-Schema definition
 * via the `patternProperty` "^(?!__ignore$).+$".
 */
export interface AReferenceToAParametrizedTranslationRecord1 {
  [k: string]: unknown;
}
/**
 * Allows to apply different pre-set functions to the input value with an object parameter before returning a localized string
 */
export interface ParametrizedTranslationRecord {
  processor: FunctionName;
  parameter: ParameterObject;
  input: InputObject;
}
/**
 * An object that as its only key has the name of the function that will process the input. Default functions: id, plural, currency, date
 */
export interface FunctionName {
  [k: string]: FunctionNameKey;
}
/**
 * A translation record that consists of multiple translation strings or references to other translation records
 */
export interface PlainStringTranslationRecordWithReferences {
  [k: string]: EitherATranslationStringOrAReferenceToAnotherTranslationKey;
}
